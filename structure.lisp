;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; LispFurc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Copyright 2015, Michal "phoe" Herda.
;;;;
;;;; The whole project is licensed under GPLv3.
;;;;

(in-package #:lispfurc)

;;;;=========================================================
;;;; STRUCTURE

(defmacro define-alist (name &body body)
  "This macro, given a SYMBOL, creates a EMPTY-SYMBOL function that generates an alist based
on the rest of arguments given to this macro (it calls ALIST-GEN internally) and
a NEW-SYMBOL macro that allows you to non-destructively modify the alist generated by
EMPTY-SYMBOL, as it calls ALIST-APPLY-DIFF on EMPTY-SYMBOL and the list of arguments you pass
to the macro."
  (check-type name string-designator)
  (let ((empty-name (intern (concatenate 'string "EMPTY-" (string name))))
	(new-name   (intern (concatenate 'string "NEW-" (string name)))))
    `(progn
       (defun ,empty-name ()
	 (alist-gen ,@body))
       (defmacro ,new-name (&body args)
	 `(alist-apply-diff ',(funcall (symbol-function ',empty-name))
			    (plist-alist (list ,@args))))
       t)))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (define-alist position
    :coords :facing :stance)
  (define-alist dream
    :dreamname)
  (define-alist connection
    :host   :port  :socket
    :stream :login :password)
  (define-alist furre
    :name     :desc
    (:position (empty-position))
    :portrait :species  :gender
    :fur      :markings :hair
    :eyes     :badge    :cape
    :bracers  :trousers :boots)
  (define-alist furres-list
    (:dummyfurre1 (empty-furre))
    (:dummyfurre2 (empty-furre))
    (:dummyfurre3 (empty-furre)))
  (define-alist empty-state
    (:connection (empty-connection))
    (:furres     (empty-furres-list))
    (:dream      (empty-dream))
    :outputs))
